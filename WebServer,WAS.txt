Static Pages
 - WebServer는 파일 경로 이름을 받아 경로와 일치하는 file contents를 반환 / 항상 동일한 페이지를 반환
 - 항상 동일한 페이지를 반환 / ex) image, html, css, js파일 등 컴퓨터에 저장된 파일들
Dynamic Pages
 - 인자의 내용에 맞게 동적 contents를 반환
 - 웹 서버에 의해 실행되는 프로그램을 통해 만들어진 결과물 Servlet: WAS 위에서 돌아가는 JAVA Program
 - 개발자는 servlet에 doGet()을 구현

WebServer와 WAS의 차이
1. Web Server: ex) Apache Server, Nginx, IIS(Windows전동 Web서버)
 1) 소프트웨어 / 하드웨어로 구분
  - 하드웨어: Web서버가 설치되어 있는 컴퓨터
  - 소프트웨어: 웹 브라우저 클라이언트로부터 HTTP요청을 받아 정적인 컨텐츠(.html .jpeg, .css등)를 제공하는 컴퓨터 프로그램
 2) 기능
  - HTTP 프로토콜을 기반, 클라이언트의 요청을 서비스 하는 기능 / 요청에 따라 두가지 기능 중 적절하게 선택해 수행
   기능1) 정적 컨텐츠제공 / WAS를 거치지 않고 바로 자원 제공
   기능2) 동적 컨텐츠 제공 위한 요청 전달 / 클라이언트의 Request를 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달(Response)
 3) Web Server가 필요한 이유
  - 정적 파일(이미지 등)은 웹문서(HTML)가 클라이언트로 보내질때 함께 가는 것이 아님
  - 클라이언트는 HTML 문서를 먼저 받고 그에 맞게 필요한 정적파일을 다시 서버로 요청, 그제야 정적파일을 받아옴
  - Web Server를 통해 정적 파일들을 Application Server까지 가지 않고 앞단에서 빠르게 보내줄 수 있음
   => Web Server에서는 정적 컨텐츠만 처리하게 기능을 분배해 서버의 부담 줄일 수 있음

2. WAS: Web Server + Web Container ex) Tomcat, JBoss, Jeus, Web Sphere 등
 1) 개념 
  - DB조회나 다양한 로직처리를 요구하는 동적 컨텐츠 제공을 위해 만들어진 Application Server
  - HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어
    *미들웨어: 소프트웨어 엔진 / 비즈니스 로직을 Client와 DBMS 사이의 MiddleWare Server에서 동작하도록 해 Client는 입력, 출력만 담당하게 됨
      - 미들웨어 동작 과정 {
        - Client는 단순히 요청만 중앙에 있는 MiddleWare Server에게 보냄
        - MiddleWare Server에서 대부분의 로직이 수행
        - 이때, 데이터를 조작할 일이 있으면 DBMS에 부탁
        - 로직의 결과를 Client에 전송
        - Client는 그 결과를 화면에 보여줌
      }
  - 웹컨테이너 혹은 서블릿 컨테이너라고 불림 / JSP, Servlet 구동 환경을 제공함
    *컨테이너: JSP, Servlet을 실행시킬 수 있는 소프트웨어
 2) 역할
  - Web Server 기능들을 구조적으로 분리해 처리하고자 하는 목적으로 제시
   - 분산 트랜잭션, 보안, 메시징, 쓰레드 처리 등의 기능을 처리하는 분산환경에서 사용됨
   - 주로 DB서버와 같이 수행
  - 현재는 WAS가 가지고 있는 Web Server도 정적 컨텐츠를 처리하는데 있어 성능상 큰 차이가 없음
 3) 기능
  - 프로그램 실행 환경과 DB접속 기능 제공
  - 여러개의 트랜잭션(논리적 작업 단위) 관리 기능
  - 업무를 처리하는 비즈니스 로직 수행
 4) WAS가 필요한 이유
  - 웹페이지는 정적, 동적 컨텐츠 모두 존재
  - 사용자 요청에 맞게 적절한 동적 컨텐츠를 만들어 제공해야 하는데 이때 Web Server만을 이용하면 요청에 대한 결과값을 모두 미리 만들어두어야 함
   -> 이렇게 수행하기엔 자원이 절대적으로 부족
  => WAS를 통해 요청에 맞는 데이터를 DB에서 가져와 비즈니스 로직에 맞게 그때 그때 결과를 만들어 제공함으로써 효율적인 자원 활용 가능

* WAS가 Web Server의 기능도 모두 수행하면 되지 않는가?
 1) 기능을 분리해 서버 부하 방지
  - WAS는 DB조회나 다양한 로직을 처리해야하기 때문에 단순한 정적 컨텐츠는 Web Server에서 빠르게 클라이언트에 제공하는 것이 좋음
  - WAS는 기본적으로 동적 컨텐츠를 제공하기 위해 존재하는 서버
  - WAS가 정적 컨텐츠까지 처리할 경우 부하가 커지게 되고 동적 컨텐츠의 처리가 지연됨에 따라 수행 속도가 느려지고 페이지 노출 시간이 늘어남
 2) 물리적 보안 강화
  - SSL에 대한 암복호화 처리에 Web Server를 사용
 3) 여러 대의 WAS를 연결 가능
  - Load Balancing을 위해 Web Server를 사용
  - fail over(장애극복), fail back 처리에 유리
  - 특히 여러개의 서버를 사용하는 대용량 Web Application의 경우 Web Server와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응 가능
    ex) 앞 단의 Web Server에서 오류가 발생한 WAS를 이용하지 못하게 한 후 WAS를 재시작함으로써 사용자는 오류를 느끼지 못하고 이용 가능
 4) 여러 Web Application 서비스 가능 ex) 하나의 서버에서 PHP Application과 Java Application을 함께 사용하는 경우
 5) 기타
  - 접근 허용 IP관리, 2대 이상의 서버에서의 세션 관리 등도 Web Server에서 처리하면 효율적
 => 즉, 자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 Web Server와 WAS를 분리
 => Web Server를 WAS 앞에 두고 필요한 WAS들을 Web Server에 플러그인 형태로 설정하면 더욱 효율적인 분산 처리가 가능

3. Web Service Architecture
 - 다양한 구조를 가질 수 있다
  1) Client -> Web Server -> DB
  2) Client -> WAS -> DB
  3) Client -> Web Server -> WAS -> DB
  * 3) 구조의 동작 과정
     - Web Server는 웹 브라우저 클라이언트로부터 HTTP요청 받음
     -> Web Server는 클라이언트의 요청을 WAS에 보냄
     -> WAS는 관련된 Servlet을 메모리에 올림
     -> WAS는 web.xml을 참조하여 해당 Servlet에 대한 Thread를 생성 (Thread Pool 이용)
     -> HttpServletRequest와 HttpServletResponse 객체를 생성해 Servlet에 전달
        * Thread는 Servlet의 service() 메서드를 호출 -> service() 메서드는 요청에 맞게 doGet() / doPost() 메서드를 호출
     -> doGet()또는 doPost() 메서드는 인자에 맞게 생성된 적절한 동적 페이지를 Response객체에 담아 WAS에 전달
     -> WAS는 Response객체를 HttpResponse형태로 바꿔 Web Server에 전달
     -> 생성된 Thread를 종료하고 HttpServletRequest와 HttpServletResponse 객체를 제거


  
출처: https://gmlwjd9405.github.io/2018/10/27/webserver-vs-was.html